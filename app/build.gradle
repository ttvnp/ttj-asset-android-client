apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-kapt'

android {

    lintOptions {
        disable 'GradleCompatible', 'GoogleAppIndexingWarning', 'UnusedResources'
    }

    def globalConfiguration = rootProject.ext

    compileSdkVersion globalConfiguration.androidCompileSdkVersion

    Properties properties = new Properties()
    def localPropertyFile = project.rootProject.file('local.properties')
    if (localPropertyFile.exists()) {
        properties.load(localPropertyFile.newDataInputStream())
    }

    defaultConfig {
        applicationId globalConfiguration.androidApplicationId
        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion
        multiDexEnabled true
        versionCode globalConfiguration.androidVersionCode
        versionName globalConfiguration.androidVersionName
        testInstrumentationRunner globalConfiguration.testInstrumentationRunner
    }

    signingConfigs {
        debug {
            storeFile file('../buildSystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('../buildSystem/release.keystore')
            storePassword properties.getProperty("KEYSTORE_PASSWORD", System.getenv("KEYSTORE_PASSWORD"))
            keyAlias properties.getProperty("KEYSTORE_ALIAS", System.getenv("KEYSTORE_ALIAS"))
            keyPassword properties.getProperty("KEYSTORE_PASSWORD", System.getenv("KEYSTORE_PASSWORD"))
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "env"
    productFlavors {
        local {
            dimension "env"
            applicationIdSuffix ".testnet"
            versionNameSuffix "-testnet"
            resValue "string", "app_name", "Local TTJ Wallet"
            resValue "string", "sencoin_admin_address", "GCDRXAESBAQIACAPRLUU46LYYONNDRLXZ6RF6YPCQ7BLJ7EJOIEUWD5Z"
            resValue "string", "sencoinex_admin_address", "GD3FVZAS2QLSKIR3XXZPZCP3CVTFE2VTKKR5PZLH3TUKTXGBHN3XJZSB"
        }
        dev {
            dimension "env"
            applicationIdSuffix ".testnet"
            versionNameSuffix "-testnet"
            resValue "string", "app_name", "Test TTJ Wallet"
            resValue "string", "sencoin_admin_address", "GCDRXAESBAQIACAPRLUU46LYYONNDRLXZ6RF6YPCQ7BLJ7EJOIEUWD5Z"
            resValue "string", "sencoinex_admin_address", "GD3FVZAS2QLSKIR3XXZPZCP3CVTFE2VTKKR5PZLH3TUKTXGBHN3XJZSB"
        }
        prod {
            dimension "env"
            resValue "string", "app_name", "TTJ Wallet"
            resValue "string", "sencoin_admin_address", "GBMD3M5S5XE7MCSFHME5AFRGB6NEYGNTDPHNCYIZOL7KK5CQRI3SYG6R"
            resValue "string", "sencoinex_admin_address", "GAJIPAQB5IWHL7RB5SPRUZNL2U653GCM6SZ77IQ36RYSP3CTVY3LHOJB"
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        local.java.srcDirs += 'src/local/kotlin'
        dev.java.srcDirs += 'src/dev/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    buildToolsVersion globalConfiguration.androidBuildToolsVersion
}

dependencies {

    // for multi dex support
    implementation 'androidx.multidex:multidex:2.0.0'

    // Compile
    def compileTimeDependencies = rootProject.ext.compileTimeDependencies
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    kapt compileTimeDependencies.daggerCompiler
    kapt compileTimeDependencies.daggerAndroidProcessor
    compileOnly compileTimeDependencies.javaxAnnotation
    compileOnly compileTimeDependencies.javaxInject

    // Common
    def commonDependencies = rootProject.ext.commonDependencies
    for (dependency in commonDependencies) {
        implementation dependency.value
    }

    // Presentation
    def presentationDependencies = rootProject.ext.presentationDependencies
    for (dependency in presentationDependencies) {
        implementation dependency.value
    }

    // Development
    def developmentDependencies = rootProject.ext.developmentDependencies
    debugImplementation developmentDependencies.leakCanary
    releaseImplementation developmentDependencies.leakCanaryNoop
    testImplementation developmentDependencies.leakCanaryNoop

    // Test
    def testDependencies = rootProject.ext.testDependencies
    for (dependency in testDependencies) {
        testImplementation dependency.value
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //Module Dependencies
    implementation project(':domain')
    implementation project(':data')

    // for crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }

}

apply plugin: 'com.google.gms.google-services'
